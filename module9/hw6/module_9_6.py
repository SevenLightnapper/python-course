# Домашнее задание по теме "Генераторы"
"""
Задача:

Напишите функцию-генератор all_variants(text), которая принимает строку text и возвращает объект-генератор.
При каждой итерации которого будет возвращаться подпоследовательности переданной строки.

Пункты задачи:
    1. Напишите функцию-генератор all_variants(text).
    2. Опишите логику работы внутри функции all_variants.
    3. Вызовите функцию all_variants и выполните итерации.
"""
from typing import Generator

# Generator[str, None, None]:
# Первый аргумент (str) указывает тип значений, которые будут генерироваться.
# Второй аргумент (None) указывает тип значения, которое может быть передано в генератор с помощью метода send().
# Так как мы не используем send(), то здесь None.
# Третий аргумент (None) указывает тип значения,
# которое будет возвращено генератором после его завершения (после вызова return).
# В данном случае у нас нет return, поэтому тип — None.
def all_variants(text: str) -> Generator[str, None, None]:
    """
    Функция-генератор возвращает все подпоследовательности переданной строки.
    :param text: Строка, для которой нужно найти все подпоследовательности.
    :return: Генератор, который возвращает последовательности.
    """
    length = len(text)
    # перебираем возможные начальные позиции подпоследовательностей
    for start in range(length):
        # перебираем возможные конечные позиции подпоследовательностей
        for end in range(start + 1, length + 1):
            # возвращаем текущую подпоследовательность строки на каждой итерации
            yield text[start:end]


# пример использования №1
a = all_variants("abc")
for i in a:
    print(i)

# пример использования №2
a1 = all_variants("12mf@$")
for i in a1:
    print(i)
