# Домашнее задание по теме "Декораторы"
"""
Задание:

Напишите 2 функции:
    1. Функция, которая складывает 3 числа (sum_three)
    2. Функция декоратор (is_prime), которая распечатывает "Простое",
       если результат 1ой функции будет простым числом и "Составное" в противном случае.

Примечания:
    1. Не забудьте написать внутреннюю функцию wrapper в is_prime
    2. Функция is_prime должна возвращать wrapper
    3. @is_prime - декоратор для функции sum_three
"""


def is_prime(func):
    """
    Декоратор, который проверяет, является ли результат функции простым числом.
    :param func: Функция
    """
    def wrapper(*args, **kwargs):
        result_ = func(*args, **kwargs)

        # Простое число — это число больше 1, которое делится только на 1 и на само себя.
        # Если число делится на какое-либо другое число, кроме 1 и самого себя, то оно является составным.
        # Проверка на простое число
        if result_ > 1:
            # Если число n не является простым, оно обязательно будет иметь делители,
            # меньшие или равные корню из этого числа.
            # Например, если у нас есть число n = 100, его делители включают числа от 1 до 10 (так как 10 * 10 = 100).
            # Проверять числа после 10 уже не нужно, так как все делители будут скомплементированы делителями,
            # которые меньше 10.
            # Приводим корень к целому числу с помощью int(),
            # потому что результат возведения в степень даёт число с плавающей точкой,
            # а индексы цикла range должны быть целыми.
            # Добавляем 1, чтобы включить в проверку целое число,
            # равное самому корню, поскольку функция range не включает верхнюю границу.
            for i in range(2, int(result_ ** 0.5) + 1):
                if result_ % i == 0:
                    print("Составное")
                    break
            else:
                print("Простое")
        else:
            print("Составное")
        return result_
    return wrapper


@is_prime
def sum_three(first: int, second: int, third: int) -> int:
    """
    Функция складывает три числа.
    :param first: Первое число
    :param second: Второе число
    :param third: Третье число
    :return: сумма трех чисел
    """
    return first + second + third


# пример использования
result = sum_three(2, 3, 6)
print(result)
result3 = sum_three(-10, 0, 9)
print(result3)
result1 = sum_three(20, 30, 60)
print(result1)
