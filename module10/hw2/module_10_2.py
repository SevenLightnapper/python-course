# Домашнее задание по теме "Потоки на классах"
"""
Задача "За честь и отвагу!":

Создайте класс Knight, наследованный от Thread, объекты которого будут обладать следующими свойствами:
    1. Атрибут name - имя рыцаря. (str)
    2. Атрибут power - сила рыцаря. (int)

А также метод run, в котором рыцарь будет сражаться с врагами:
    1. При запуске потока должна выводится надпись "<Имя рыцаря>, на нас напали!".
    2. Рыцарь сражается до тех пор, пока не повергнет всех врагов (у всех потоков их 100).
    3. В процессе сражения количество врагов уменьшается на power текущего рыцаря.
    4. По прошествию 1 дня сражения (1 секунды) выводится строка
       "<Имя рыцаря> сражается <кол-во дней>..., осталось <кол-во воинов> воинов."
    5. После победы над всеми врагами выводится надпись
       "<Имя рыцаря> одержал победу спустя <кол-во дней> дней(дня)!"

Как можно заметить нужно сделать задержку в 1 секунду, инструменты для задержки выберите сами.

Пункты задачи:
    1. Создайте класс Knight с соответствующими описанию свойствами.
    2. Создайте и запустите 2 потока на основе класса Knight.
    3. Выведите на экран строку об окончании битв.
"""
from threading import Thread
from time import sleep


class Knight(Thread):
    """
    Класс описывающий рыцаря. Наследник класса Тред.
    """
    total_enemies = 100


    def __init__(self, name: str, power: int):
        super().__init__()
        self.name: str = name
        self.power: int = power
        self.days_fought = 0  # счетчик дней сражений


    def run(self):
        print(f"{self.name}, на нас напали!")

        while self.total_enemies > 0:
            # рыцарь сражается 1 день
            sleep(1) # пауза 1 секунда
            # уменьшаем кол-во врагов на силу рыцаря
            self.total_enemies -= self.power
            # увеличиваем кол-во дней сражения
            self.days_fought += 1

            # кол-во врагов не должно уходить в минус
            if self.total_enemies < 0:
                self.total_enemies = 0

            # печать прогресса битвы
            print(f"{self.name} сражается {self.days_fought} день(дня)..., осталось {self.total_enemies} воинов.")

        # объявление победы
        print(f"{self.name} одержал победу спустя {self.days_fought} дней(дня)!")


# пример использования
# Создание класса
first_knight = Knight('Sir Lancelot', 10)
second_knight = Knight("Sir Galahad", 20)
# Запуск потоков и остановка текущего
first_knight.start()
second_knight.start()
first_knight.join()
second_knight.join()
# Вывод строки об окончании сражения
print("Все битвы закончились!")
