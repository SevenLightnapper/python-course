# Домашнее задание по теме "Доступ к свойствам родителя. Переопределение свойств."
"""
Задача "Изменять нельзя получать":
В этой задаче мы реализуем классы транспорта, в которых нельзя будет просто так поменять цвет,
мощность двигателя и прочие свойства, т.к. в реальной жизни это чаще всего делается не владельцем,
а в специальных сервисах. Да, узнать значения этих свойств мы сможем, но вот изменить - нет.

Вам необходимо создать 2 класса: Vehicle и Sedan, где Vehicle - это любой транспорт,
а Sedan(седан) - наследник класса Vehicle.

I. Каждый объект Vehicle должен содержать следующие атрибуты объекта:
    1. Атрибут owner(str) - владелец транспорта. (владелец может меняться)
    2. Атрибут __model(str) - модель (марка) транспорта. (мы не можем менять название модели)
    3. Атрибут __engine_power(int) - мощность двигателя. (мы не можем менять мощность двигателя самостоятельно)
    4. Атрибут __color(str) - название цвета. (мы не можем менять цвет автомобиля своими руками)
А так же атрибут класса:
    1. Атрибут класса __COLOR_VARIANTS,
       в который записан список допустимых цветов для окрашивания. (Цвета написать свои)
Каждый объект Vehicle должен содержать следующий методы:
    1. Метод get_model - возвращает строку: "Модель: <название модели транспорта>"
    2. Метод get_horsepower - возвращает строку: "Мощность двигателя: <мощность>"
    3. Метод get_color - возвращает строку: "Цвет: <цвет транспорта>"
    4. Метод print_info - распечатывает результаты методов (в том же порядке): get_model, get_horsepower, get_color;
       а так же владельца в конце в формате "Владелец: <имя>"
    5. Метод set_color - принимает аргумент new_color(str), меняет цвет __color на new_color,
       если он есть в списке __COLOR_VARIANTS, в противном случае выводит на экран надпись:
       "Нельзя сменить цвет на <новый цвет>".
Взаимосвязь методов и скрытых атрибутов:
    1. Методы get_model, get_horsepower, get_color находятся в одном классе с соответствующими им атрибутами:
       __model, __engine_power, __color. Поэтому атрибуты будут доступны для методов.
    2. Атрибут класса __COLOR_VARIANTS можно получить обращаясь к нему через объект(self).
    3. Проверка в __COLOR_VARIANTS происходит не учитывая регистр ('BLACK' ~ 'black').

II. Класс Sedan наследуется от класса Vehicle, а так же содержит следующие атрибуты:
        1. Атрибут __PASSENGERS_LIMIT = 5 (в седан может поместиться только 5 пассажиров)

Пункты задачи:
    1. Создайте классы Vehicle и Sedan.
    2. Напишите соответствующие свойства в обоих классах.
    3. Не забудьте сделать Sedan наследником класса Vehicle.
    4. Создайте объект класса Sedan и проверьте, как работают все его методы, взяты из класса Vehicle.
"""
class Vehicle:
    """
    Родительский класс для транспортных средств.
    """
    # атрибут класса: допустимые цвета
    __COLOR_VARIANTS = ['blue', 'red', 'green', 'black', 'white']


    def __init__(self, owner, model, color, engine_power):
        # атрибут объекта: владелец
        self.owner = owner
        # приватный атрибут объекта: модель
        self.__model = model
        # приватный атрибут объекта: мощность двигателя
        self.__engine_power = engine_power
        # приватный атрибут объекта: цвет
        self.__color = color


    def get_model(self):
        """
        Метод для получения модели
        :return:
        """
        return f"Модель: {self.__model}"


    def get_horsepower(self):
        """
        Метод для получения мощности двигателя
        :return:
        """
        return f"Мощность двигателя: {self.__engine_power}"


    def get_color(self):
        """
        Метод для получения текущего цвета автомобиля
        :return:
        """
        return f"Цвет: {self.__color}"


    def set_color(self, new_color):
        """
        Метод для изменения цвета автомобиля. Проверяет, допустим ли новый цвет.
        :param new_color: Новый цвет автомобиля
        """
        if new_color.lower() in (color.lower() for color in self.__COLOR_VARIANTS):
            self.__color = new_color
        else:
            print(f"Нельзя сменить цвет на {new_color}")


    def print_info(self):
        """
        Метод для вывода всей информации об автомобиле
        :return:
        """
        print("------------ INFO ------------")
        print(self.get_model())
        print(self.get_horsepower())
        print(self.get_color())
        print(f"Владелец: {self.owner}")
        print("------------ END ------------")


class Sedan(Vehicle):
    """
    Класс Sedan, наследник класса Vehicle.
    Класс представляет тип автомобиля 'Седан'.
    """
    # атрибут класса: лимит пассажиров
    __PASSENGERS_LIMIT = 5
    pass


# пример использования
if __name__ == "__main__":
    # создаем объект класса Sedan
    vehicle1 = Sedan('Fedos', 'Toyota Mark II', 'blue', 500)

    # изначальные свойства
    vehicle1.print_info()

    # меняем свойства
    vehicle1.set_color('Pink')   # нельзя сменить цвет на Pink
    vehicle1.set_color('BLACK')  # успешная смена цвета
    vehicle1.owner = 'Mark'      # смена владельца

    # проверяем, что изменилось
    vehicle1.print_info()
