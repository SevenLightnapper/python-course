# Домашнее задание по теме "Зачем нужно наследование"
"""
Задача "Съедобное, несъедобное":
Разнообразие животного мира давно будоражит умы человечества.
Царства, классы, виды...
Почему бы и нам не попробовать выстроить что-то подобное используя наследования классов?

Необходимо описать пример иерархии животного мира, используя классы и принцип наследования.

Создайте:
2 класса родителя: Animal, Plant
Для класса Animal атрибуты alive = True(живой) и fed = False(накормленный),
name - индивидуальное название каждого животного.
Для класса Plant атрибут edible = False(съедобность),
name - индивидуальное название каждого растения

4 класса наследника:
Mammal, Predator для Animal.
Flower, Fruit для Plant.

У каждого из объектов класса Mammal и Predator должны быть атрибуты и методы:
eat(self, food) - метод, где food - это параметр, принимающий объекты классов растений.

Метод eat должен работать следующим образом:
Если переданное растение (food) съедобное - выводит на экран "<self.name> съел <food.name>",
меняется атрибут fed на True.
Если переданное растение (food) не съедобное - выводит на экран "<self.name> не стал есть <food.name>",
меняется атрибут alive на False.
Т.е если животному дать съедобное растение, то животное насытится, если не съедобное - погибнет.

У каждого объекта Fruit должен быть атрибут edible = True (переопределить при наследовании)

Создайте объекты классов и проделайте действия затронутые в примере результата работы программы.

Пункты задачи:
    1. Создайте классы Animal и Plant с соответствующими атрибутами и методами
    2. Создайте(+унаследуйте) классы Mammal, Predator, Flower, Fruit с соответствующими атрибутами и методами. При необходимости переопределите значения атрибутов.
    3. Создайте объекты этих классов.
"""
class Animal:
    """
    Родительский класс "Животное"
    Атрибуты:
        * alive - живой
        * fed - накормленный
        * name - индивидуальное название каждого животного
    """
    alive = True
    fed = False
    name = None


    def __init__(self, name):
        self.name = name


    def eat(self, food):
        """
        Метод реализующий прием пищи животным
        :param food: еда
        :return:
        """
        if isinstance(food, Plant):
            if food.edible:
                print(f"{self.name} съел {food.name}")
                Animal.fed = True
            else:
                print(f"{self.name} не стал есть {food.name}")
                Animal.fed = False
                Animal.alive = False
        else:
            print(f"{self.name} не может есть это!")


class Plant:
    """
    Родительский класс "Растение"
    Атрибуты:
        * name - индивидуальное название каждого растения
        * edible - съедобность
    """
    edible = False


    def __init__(self, name):
        self.name = name


    def __str__(self):
        return f"Растение '{self.name}' съедобно: {self.edible}"


class Mammal(Animal):
    """
    Класс "Млекопитающее", наследник класса "Животное".
    Поведения у млекопитающего такие же, как у животного.
    """
    pass


class Predator(Animal):
    """
    Класс "Хищник", наследник класса "Животное".
    Поведения у хищника такие же, как и у животного.
    """
    pass


class Flower(Plant):
    """
    Класс "Цветок", наследник класса "Растение".
    Цветок несъедобен по умолчанию.
    """
    pass


class Fruit(Plant):
    """
    Класс "Фрукт", наследник класса "Растение".
    Фрукт съедобен, поэтому переопределяется атрибут edible.
    """
    edible = True  # переопределяем атрибут edible


# примеры использования
if __name__ == "__main__":
    # создаем объекты
    lion = Predator("Лев")
    elephant = Mammal("Слон")
    apple = Fruit("Яблоко")
    rose = Flower("Роза")

    # лев пытается съесть яблоко
    print(apple)
    lion.eat(apple)  # лев съел яблоко
    print(f"{lion.name} сыт: {lion.fed}, {lion.name} жив: {lion.alive}")

    # слон пытается съесть розу

    print(rose)
    elephant.eat(rose) # слон не стал есть розу
    print(f"{elephant.name} сыт: {elephant.fed}, {elephant.name} жив: {elephant.alive}")
